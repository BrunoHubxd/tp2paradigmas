### ---------------------------------Sprint 1---------------------------------

**1er Día:**
Se hizo la organización de cómo van a ser los roles en el primer spring, quedando así al menos temporalmente.

* Bruno López: Líder/Tester
* Martín Mekekiuk: Documentador/Programador
* Sebastián Casals: Programador Backend
* Leandro: Programador Programador Frontend

**2do Día:**
Se definió el enfoque general del sistema de turnos hospitalarios, separando las funcionalidades en módulos:

1. Solicitud de turno con prioridades
2. Gestión de stock de medicamentos
3. Relaciones médico-paciente

Se discutieron los criterios de urgencia (1 a 5) y cómo estos afectarían el orden de atención de los pacientes.

**3er Día:**
Se implementó la lógica base del sistema de turnos en Python utilizando `heapq` para manejar la cola priorizada y una clase `Paciente`. Se probó en consola con varios pacientes simulados.

### ---------------------------------Sprint 2---------------------------------

**Día 1**
Se inició la integración frontend-backend. Leandro creó la base de la interfaz en HTML, con formularios para solicitar turnos. Mientras tanto, Sebastián programó el backend en PHP, separando la lógica en clases reutilizables (`Paciente`, `Turnero`, `AVLTree`, `Grafo`). Se estableció una estructura ordenada de carpetas: `frontend/`, `backend/classes/`.

**Día 2**
Se implementó el formulario "Solicitud de Turno" usando `fetch()` para enviar los datos al archivo PHP `sistema_turnos.php`. Los datos se reciben como JSON, procesan con `Turnero.php` y se guarda la sesión con el turno asignado.

**Día 3**
Se programó un sistema de stock de medicamentos. Se utilizó un árbol AVL (`AVLTree.php`) para realizar búsquedas eficientes. Si un medicamento tiene stock menor a 10 unidades, se muestra una advertencia. La simulación se realiza en consola o mediante una función futura en frontend.

    "php"
    $tree = new AVLTree();
    $tree->insert("Paracetamol", "Fiebre y dolor");
    $tree->insert("Ibuprofeno", "Antiinflamatorio");
    echo "Buscar Paracetamol: " . $tree->search("Paracetamol") . "\n";

**Día 4**
Se desarrolló un grafo simple (Grafo.php) para modelar relaciones entre médicos y pacientes. Cada médico puede tener múltiples pacientes asignados. Se simula la funcionalidad de /api/relaciones.

    "php"
    $grafo = new Grafo();
    $grafo->agregarRelacion("Dr. Pérez", "Paciente1");
    $grafo->agregarRelacion("Dr. Gómez", "Paciente2");
    $grafo->mostrarAsignaciones();

**Día 5**
Día 5
Para mejorar la robustez del backend, se migró de Python a PHP, priorizando estabilidad en entorno web. Se realizaron pruebas de integración frontend-backend, corrigiendo errores menores y validaciones. Se añadió persistencia usando sesiones PHP.

**Día 6**
Se finalizó la documentación del sprint, se revisó el código, se ajustó la presentación del sistema y se completó la entrega. El sistema simula correctamente todas las funcionalidades requeridas, con una interfaz clara y lógica consistente. Todos los integrantes participaron activamente.


····Explicación de conexiones entre archivos····

-*frontend/index.html**

    Es la interfaz visual.

    Tiene un formulario para solicitar turnos y un botón para llamar al siguiente paciente.

    Usa fetch() para enviar datos en formato JSON al backend (sistema_turnos.php).

-*backend/sistema_turnos.php**

    Recibe las solicitudes del frontend mediante POST.

    Usa $_SESSION para mantener persistente la instancia del Turnero.

    Dependencias:

        Turnero.php → contiene la lógica de turnos.

        Paciente.php → define la clase del paciente.

    Funciones:

        accion = solicitar → agrega el paciente a la cola priorizada.

        accion = llamar → extrae al siguiente paciente según urgencia.

-*backend/classes/Paciente.php**

    Define la clase Paciente con nombre, DNI y nivel de urgencia.

-*backend/classes/Turnero.php**

    Administra la cola de turnos con prioridades (urgencia más alta tiene mayor prioridad).

    Usa SplPriorityQueue de PHP.

    Funciones:

        solicitarTurno(Paciente) → lo encola.

        llamarSiguiente() → retorna el paciente más urgente.

        hayTurnos() → indica si hay pacientes esperando.

-*backend/classes/AVLTree.php + Medicamento.php**

    Permiten insertar y buscar medicamentos en un árbol AVL.

    La búsqueda es rápida y balanceada.

    Se simula el endpoint /api/medicamento.

-*backend/classes/Grafo.php**

    Permite agregar relaciones entre médicos y pacientes.

    Se utiliza en /api/relaciones.

### ---------------------------------Sprint 3---------------------------------

Consolidación del Backend, Reestructuración del Frontend y Normalización de la Base de Datos

📅 Día 1 – Diagnóstico técnico y reorientación estructural del sistema
En esta primera jornada se llevó a cabo una entrevista técnica simulada con el docente en rol de inversor. 
Se identificó un error clave de planificación: el desarrollo del sistema carecía de una estructura persistente en base de datos. 
Hasta ese momento, el equipo había avanzado principalmente con formularios y vistas HTML, sin un respaldo formal que organizara los datos, lo que impedía una integración real entre frontend y backend.

🛠 Acciones tomadas:
Se reformuló el enfoque del Sprint priorizando el diseño de la base de datos como punto de partida.
Se decidió implementar la base de datos en MySQL, gestionada con phpMyAdmin.

📅 Día 2 – Creación e implementación de la base de datos hospital_gestion
Se diseñó e implementó el esquema relacional de la base de datos a través de un script SQL ejecutado en phpMyAdmin, incluyendo tablas con claves primarias, foráneas y relaciones integradas.

🧱 Tablas creadas:
pacientes
turnos
medicamentos
medicos
asignaciones (médico-paciente)
historial_consultas
camas

📌 Relaciones:
Las tablas se encuentran conectadas a través de FOREIGN KEY para garantizar integridad referencial. 
Por ejemplo, turnos, camas y historial_consultas se relacionan directamente con pacientes, y asignaciones vincula medicos con pacientes.

📅 Día 3 – Vinculación entre backend y base de datos + validación de conexión
Se codificó la lógica en PHP para establecer conexión con la base de datos mediante PDO, probando la inserción y recuperación de datos a través de formularios simples.

Además, se consolidó la separación entre backend (controllers, classes) y frontend (views), respetando el patrón MVC a pequeña escala. Se realizaron pruebas unitarias de conexión y consultas básicas.

📅 Día 4 – Reestructuración de interfaz: separación de vistas por perfil
Se procedió a reorganizar el frontend separando las vistas y formularios según el tipo de usuario: pacientes y personal médico. Esto resolvió un problema anterior donde todas las funciones estaban mezcladas en una única vista, generando confusión en la lógica de interacción.

🧩 Organización de vistas:
/frontend/views/inicio.html: pantalla de entrada con botones diferenciados.
/frontend/views/solicitar_turno.html: formulario exclusivo para pacientes.
/frontend/views/login.html: login exclusivo para personal de salud.

📅 Día 5 – Implementación de lógica de turnos y simulación de atención
Se adaptó el backend en PHP para recibir las solicitudes desde el formulario del paciente (solicitar_turno.html) a través de registrar.php, que inserta el turno en la base de datos y muestra confirmación.
La lógica se apoya en clases reutilizables:
Paciente.php: define estructura y métodos para pacientes.
Turnero.php: administra cola de prioridades.
Grafo.php: relaciones médico-paciente.
Medicamento.php + AVLTree.php: búsqueda eficiente por nombre.

📅 Día 6 – Estilización visual y validación funcional completa
Se aplicaron mejoras visuales y de experiencia de usuario al frontend mediante CSS personalizado. Entre los estilos aplicados se destacan:
División de la pantalla de inicio con imagen de fondo translúcida.
Botones bien definidos para separar flujos (paciente vs. personal).
Interfaz de login con diseño moderno, campo de contraseña con botón de mostrar/ocultar.
Formularios con placeholders descriptivos y validación básica.

✅ Pruebas realizadas:
Registro exitoso de pacientes desde frontend.

Inserción de turnos en base de datos con validación de urgencia.

Visualización y recuperación de turnos desde el panel de personal.

Prueba de login funcional para personal médico/administrativo.

🧩 Conclusión del Sprint 3
Este sprint marcó una evolución integral del sistema, tanto a nivel visual como lógico. Se dejó atrás el esquema inicial desordenado y se consolidó una arquitectura más robusta y modular.
Gracias a la nueva estructura de base de datos y la correcta segmentación de vistas, el sistema se encuentra preparado para escalar hacia funcionalidades más complejas como:
*Panel administrativo de gestión de medicamentos.
*Seguimiento de pacientes internados.
*Reportes estadísticos diarios y mensuales.
El equipo logró cumplir los objetivos propuestos y dejó establecida una base sólida para el Sprint 4.

### ---------------------------------Sprint 4---------------------------------
Extensión de funcionalidades, segmentación visual y gestión avanzada de datos

📅 Día 1 – Planificación de nuevas funcionalidades y división del trabajo
El equipo inició el Sprint 4 realizando una planificación detallada basada en los avances logrados durante el Sprint 3. 
Se propusieron nuevas funcionalidades orientadas a mejorar la operatividad del sistema hospitalario desde la perspectiva tanto del paciente como del personal médico. 
Se definieron tres módulos clave a implementar:

*Formulario de solicitud de turnos refinado.

*Visualización dinámica de la cola de espera.

*Consulta del historial de pacientes atendidos.

Se asignaron tareas específicas entre frontend y backend, priorizando un enfoque modular.

📅 Día 2 – Rediseño visual del formulario de solicitud de turnos
Se desarrolló una nueva versión de solicitar_turno.html, mejorando tanto su estética como la experiencia de usuario. Entre los cambios aplicados se destacan:

*Interfaz centrada y responsiva (form-wrapper).

*Estilos modernos, con campos suavemente delineados, sombras y paleta en tonos azules.

*Inclusión de campos nuevos como nombre y apellido diferenciados.

🔗 El formulario envía los datos al backend usando POST hacia registrar.php.

📄 Archivo: solicitar_turno.html
📁 Ubicación: /frontend/views/solicitar_turno.html

📅 Día 3 – Implementación del módulo de visualización de la cola de espera
Se creó una nueva vista para el personal administrativo y médico: ver_cola.html. Esta pantalla permite consultar en tiempo real los pacientes registrados, organizados por urgencia.

🛠 Características implementadas:

Tabla HTML con cabecera fija y estilos integrados.

Uso de fetch() para consumir datos desde ver_cola.php (backend).

Renderización dinámica del contenido en el navegador.

Mensajes automáticos en caso de que la cola esté vacía o haya errores de carga.

📄 Archivo: ver_cola.html
📁 Ubicación: /frontend/views/ver_cola.html

📅 Día 4 – Desarrollo del módulo de historial de consultas médicas
Se diseñó e integró el módulo de historial clínico, permitiendo al personal visualizar todas las consultas anteriores realizadas por pacientes.

💡 Detalles técnicos:

Se utilizó JavaScript para cargar el contenido desde ver_historial_consultas.php.

Las consultas se muestran en una tabla organizada por ID, fecha, paciente, DNI y descripción.

Se manejan errores del lado del servidor con mensajes claros en pantalla.

El código es reutilizable y preparado para paginación futura.

📄 Archivo: ver_historial_consultas.html
📁 Ubicación: /frontend/views/ver_historial_consultas.html

📅 Día 5 – Validaciones, limpieza de código y conexión entre vistas
Se validó que los nuevos módulos interactúen correctamente con la base de datos ya existente (hospital_gestion). Se realizaron ajustes:

Corrección de rutas relativas entre vistas.

Revisión del uso de controladores (controllers/) para asegurar modularidad.

Vinculación de la vista de historial y cola al panel del administrador con botones de navegación.

🧪 Se verificó el correcto registro de nuevos turnos y su aparición inmediata en la cola, además de la correcta actualización del historial tras cada consulta registrada.

📅 Día 6 – Revisión general, identificación de errores y lecciones aprendidas
Durante la última jornada, el equipo identificó una inconsistencia crítica: el historial de pacientes no se actualizaba en ciertos casos debido a una validación incompleta en el backend. Este problema se debió a que no todos los registros de atención estaban siendo correctamente insertados si faltaban ciertos campos (como descripción).

🔧 Solución aplicada:

Se ajustó la validación en ver_historial_consultas.php.

Se modificaron los controladores para permitir valores opcionales controlados y se agregó manejo de excepciones.

Problema solucionado
La validación de datos no debe depender exclusivamente del frontend. 
El backend debe contemplar escenarios faltantes y retornar mensajes de error amigables para facilitar la depuración y experiencia de usuario.

### ---------------------------------Sprint 5---------------------------------
