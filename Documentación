### ---------------------------------Sprint 1---------------------------------

**1er D√≠a:**
Se hizo la organizaci√≥n de c√≥mo van a ser los roles en el primer spring, quedando as√≠ al menos temporalmente.

* Bruno L√≥pez: L√≠der/Tester
* Mart√≠n Mekekiuk: Documentador/Programador
* Sebasti√°n Casals: Programador Backend
* Leandro: Programador Programador Frontend

**2do D√≠a:**
Se defini√≥ el enfoque general del sistema de turnos hospitalarios, separando las funcionalidades en m√≥dulos:

1. Solicitud de turno con prioridades
2. Gesti√≥n de stock de medicamentos
3. Relaciones m√©dico-paciente

Se discutieron los criterios de urgencia (1 a 5) y c√≥mo estos afectar√≠an el orden de atenci√≥n de los pacientes.

**3er D√≠a:**
Se implement√≥ la l√≥gica base del sistema de turnos en Python utilizando `heapq` para manejar la cola priorizada y una clase `Paciente`. Se prob√≥ en consola con varios pacientes simulados.

### ---------------------------------Sprint 2---------------------------------

**D√≠a 1**
Se inici√≥ la integraci√≥n frontend-backend. Leandro cre√≥ la base de la interfaz en HTML, con formularios para solicitar turnos. Mientras tanto, Sebasti√°n program√≥ el backend en PHP, separando la l√≥gica en clases reutilizables (`Paciente`, `Turnero`, `AVLTree`, `Grafo`). Se estableci√≥ una estructura ordenada de carpetas: `frontend/`, `backend/classes/`.

**D√≠a 2**
Se implement√≥ el formulario "Solicitud de Turno" usando `fetch()` para enviar los datos al archivo PHP `sistema_turnos.php`. Los datos se reciben como JSON, procesan con `Turnero.php` y se guarda la sesi√≥n con el turno asignado.

**D√≠a 3**
Se program√≥ un sistema de stock de medicamentos. Se utiliz√≥ un √°rbol AVL (`AVLTree.php`) para realizar b√∫squedas eficientes. Si un medicamento tiene stock menor a 10 unidades, se muestra una advertencia. La simulaci√≥n se realiza en consola o mediante una funci√≥n futura en frontend.

    "php"
    $tree = new AVLTree();
    $tree->insert("Paracetamol", "Fiebre y dolor");
    $tree->insert("Ibuprofeno", "Antiinflamatorio");
    echo "Buscar Paracetamol: " . $tree->search("Paracetamol") . "\n";

**D√≠a 4**
Se desarroll√≥ un grafo simple (Grafo.php) para modelar relaciones entre m√©dicos y pacientes. Cada m√©dico puede tener m√∫ltiples pacientes asignados. Se simula la funcionalidad de /api/relaciones.

    "php"
    $grafo = new Grafo();
    $grafo->agregarRelacion("Dr. P√©rez", "Paciente1");
    $grafo->agregarRelacion("Dr. G√≥mez", "Paciente2");
    $grafo->mostrarAsignaciones();

**D√≠a 5**
D√≠a 5
Para mejorar la robustez del backend, se migr√≥ de Python a PHP, priorizando estabilidad en entorno web. Se realizaron pruebas de integraci√≥n frontend-backend, corrigiendo errores menores y validaciones. Se a√±adi√≥ persistencia usando sesiones PHP.

**D√≠a 6**
Se finaliz√≥ la documentaci√≥n del sprint, se revis√≥ el c√≥digo, se ajust√≥ la presentaci√≥n del sistema y se complet√≥ la entrega. El sistema simula correctamente todas las funcionalidades requeridas, con una interfaz clara y l√≥gica consistente. Todos los integrantes participaron activamente.


¬∑¬∑¬∑¬∑Explicaci√≥n de conexiones entre archivos¬∑¬∑¬∑¬∑

-*frontend/index.html**

    Es la interfaz visual.

    Tiene un formulario para solicitar turnos y un bot√≥n para llamar al siguiente paciente.

    Usa fetch() para enviar datos en formato JSON al backend (sistema_turnos.php).

-*backend/sistema_turnos.php**

    Recibe las solicitudes del frontend mediante POST.

    Usa $_SESSION para mantener persistente la instancia del Turnero.

    Dependencias:

        Turnero.php ‚Üí contiene la l√≥gica de turnos.

        Paciente.php ‚Üí define la clase del paciente.

    Funciones:

        accion = solicitar ‚Üí agrega el paciente a la cola priorizada.

        accion = llamar ‚Üí extrae al siguiente paciente seg√∫n urgencia.

-*backend/classes/Paciente.php**

    Define la clase Paciente con nombre, DNI y nivel de urgencia.

-*backend/classes/Turnero.php**

    Administra la cola de turnos con prioridades (urgencia m√°s alta tiene mayor prioridad).

    Usa SplPriorityQueue de PHP.

    Funciones:

        solicitarTurno(Paciente) ‚Üí lo encola.

        llamarSiguiente() ‚Üí retorna el paciente m√°s urgente.

        hayTurnos() ‚Üí indica si hay pacientes esperando.

-*backend/classes/AVLTree.php + Medicamento.php**

    Permiten insertar y buscar medicamentos en un √°rbol AVL.

    La b√∫squeda es r√°pida y balanceada.

    Se simula el endpoint /api/medicamento.

-*backend/classes/Grafo.php**

    Permite agregar relaciones entre m√©dicos y pacientes.

    Se utiliza en /api/relaciones.

### ---------------------------------Sprint 3---------------------------------
## ‚úÖ Ideas para funcionalidades Sprint 3

1. ‚úÖ **Historial de pacientes atendidos** (guardarlos en archivo o base de datos).
2. ‚úÖ **Login m√©dico / administrativo** para ver panel distinto.
3. ‚úÖ **Filtro de turnos por urgencia en pantalla**.
4. ‚úÖ **Formulario para registrar medicamentos** (cargar m√°s en el AVL).
5. ‚úÖ **Interfaz visual del grafo** (mostrar relaciones con JavaScript tipo Graphviz).
6. ‚úÖ **Contador de turnos atendidos por d√≠a**.
7. ‚úÖ **Simulaci√≥n multiconsultorio**: atender pacientes por m√©dico.


üìÖ D√≠a 1 ‚Äì Diagn√≥stico t√©cnico y reorientaci√≥n del enfoque del proyecto
Durante el primer d√≠a del Sprint 3, el equipo mantuvo una reuni√≥n t√©cnica simulando una entrevista con el profesor en el rol de inversor. En esta instancia se identific√≥ un d√©ficit cr√≠tico en la planificaci√≥n t√©cnica: hasta el momento no se hab√≠a definido formalmente la base de datos, elemento esencial para garantizar la persistencia y gesti√≥n coherente de la informaci√≥n del sistema hospitalario.

‚ùó Problem√°tica detectada:
El desarrollo previo hab√≠a estado centrado en la creaci√≥n del frontend (HTML/CSS), sin una estructura de datos concreta ni tablas relacionales implementadas. Esta ausencia generaba una barrera para el avance del backend en PHP, ya que no exist√≠a una l√≥gica persistente que permitiera realizar operaciones CRUD de manera consistente.

üõ† Acciones correctivas:
Se reorganiz√≥ la planificaci√≥n del Sprint 3, priorizando el dise√±o e implementaci√≥n de la base de datos como eje central del sistema.
Se defini√≥ el conjunto de entidades y relaciones necesarias, a partir de los requerimientos funcionales ya definidos.
Se opt√≥ por MySQL como sistema gestor de base de datos, accediendo a √©l a trav√©s de phpMyAdmin, y se implement√≥ conexi√≥n al backend mediante PDO (PHP Data Objects).
Se estableci√≥ control de versiones con Git (repositorio local y remoto), permitiendo mantener trazabilidad y un trabajo colaborativo ordenado.

üìÖ D√≠as 2 y 3 ‚Äì Implementaci√≥n definitiva de la base de datos y vinculaci√≥n con backend
Durante estas jornadas se procedi√≥ a crear la base de datos denominada hospital_gestion en MySQL, incluyendo las tablas y relaciones necesarias. La creaci√≥n se realiz√≥ a trav√©s de un script SQL ejecutado en phpMyAdmin, cuyo √©xito se verific√≥ visualmente en la interfaz y funcionalmente mediante pruebas de conexi√≥n con el backend en PHP.

**Estructura de la base de datos implementada:** 
**Tabla**	Descripci√≥n
------------------------
**pacientes**	Registra a los pacientes con campos como nombre, DNI (√∫nico), nivel de urgencia, s√≠ntomas, estado actual y fecha de registro.
**turnos**	Contiene los turnos registrados por los pacientes, incluyendo estado (pendiente, atendido, cancelado), fecha y relaci√≥n directa con pacientes.
**medicamentos**	Controla el stock de medicamentos, registrando nombre, cantidad disponible y fecha de vencimiento.
**medicos** Almacena informaci√≥n del personal m√©dico (nombre, especialidad).
**asignaciones**	Relaci√≥n muchos-a-muchos entre m√©dicos y pacientes, incluyendo la fecha de asignaci√≥n.
**historial_consultas**	Registra consultas previas de los pacientes, permitiendo crear un historial cl√≠nico, incluyendo fecha, descripci√≥n y vinculaci√≥n con paciente.
**camas**	Representa el estado de ocupaci√≥n de camas hospitalarias, indicando si est√°n libres u ocupadas, y el paciente asociado si corresponde.

üìå Relaci√≥n entre tablas:
Las tablas est√°n vinculadas mediante claves for√°neas (FOREIGN KEY) para garantizar integridad referencial:
turnos, historial_consultas, camas y asignaciones se relacionan directamente con pacientes.
asignaciones tambi√©n se relaciona con medicos.

üîó Conexi√≥n a backend:
Se realizaron pruebas de conexi√≥n utilizando PHP con PDO, confirmando que el sistema puede:
Insertar datos desde formularios web.
Recuperar registros desde la base de datos para mostrarlos en la interfaz.
Realizar operaciones de actualizaci√≥n y eliminaci√≥n respetando las restricciones definidas.

