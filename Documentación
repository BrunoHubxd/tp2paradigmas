### ---------------------------------Spring 1---------------------------------

**1er DÃ­a:**
Se hizo la organizaciÃ³n de cÃ³mo van a ser los roles en el primer spring, quedando asÃ­ al menos temporalmente.

* Bruno LÃ³pez: LÃ­der/Tester
* MartÃ­n Mekekiuk: Documentador/Programador
* SebastiÃ¡n Casals: Programador Backend
* Leandro: Programador Programador Frontend

**2do DÃ­a:**
Se definiÃ³ el enfoque general del sistema de turnos hospitalarios, separando las funcionalidades en mÃ³dulos:

1. Solicitud de turno con prioridades
2. GestiÃ³n de stock de medicamentos
3. Relaciones mÃ©dico-paciente

Se discutieron los criterios de urgencia (1 a 5) y cÃ³mo estos afectarÃ­an el orden de atenciÃ³n de los pacientes.

**3er DÃ­a:**
Se implementÃ³ la lÃ³gica base del sistema de turnos en Python utilizando `heapq` para manejar la cola priorizada y una clase `Paciente`. Se probÃ³ en consola con varios pacientes simulados.

### ---------------------------------Sprint 2---------------------------------

**DÃ­a 1**
Se iniciÃ³ la integraciÃ³n frontend-backend. Leandro creÃ³ la base de la interfaz en HTML, con formularios para solicitar turnos. Mientras tanto, SebastiÃ¡n programÃ³ el backend en PHP, separando la lÃ³gica en clases reutilizables (`Paciente`, `Turnero`, `AVLTree`, `Grafo`). Se estableciÃ³ una estructura ordenada de carpetas: `frontend/`, `backend/classes/`.

**DÃ­a 2**
Se implementÃ³ el formulario "Solicitud de Turno" usando `fetch()` para enviar los datos al archivo PHP `sistema_turnos.php`. Los datos se reciben como JSON, procesan con `Turnero.php` y se guarda la sesiÃ³n con el turno asignado.

**DÃ­a 3**
Se programÃ³ un sistema de stock de medicamentos. Se utilizÃ³ un Ã¡rbol AVL (`AVLTree.php`) para realizar bÃºsquedas eficientes. Si un medicamento tiene stock menor a 10 unidades, se muestra una advertencia. La simulaciÃ³n se realiza en consola o mediante una funciÃ³n futura en frontend.

    "php"
    $tree = new AVLTree();
    $tree->insert("Paracetamol", "Fiebre y dolor");
    $tree->insert("Ibuprofeno", "Antiinflamatorio");
    echo "Buscar Paracetamol: " . $tree->search("Paracetamol") . "\n";

**DÃ­a 4**
Se desarrollÃ³ un grafo simple (Grafo.php) para modelar relaciones entre mÃ©dicos y pacientes. Cada mÃ©dico puede tener mÃºltiples pacientes asignados. Se simula la funcionalidad de /api/relaciones.

    "php"
    $grafo = new Grafo();
    $grafo->agregarRelacion("Dr. PÃ©rez", "Paciente1");
    $grafo->agregarRelacion("Dr. GÃ³mez", "Paciente2");
    $grafo->mostrarAsignaciones();

**DÃ­a 5**
DÃ­a 5
Para mejorar la robustez del backend, se migrÃ³ de Python a PHP, priorizando estabilidad en entorno web. Se realizaron pruebas de integraciÃ³n frontend-backend, corrigiendo errores menores y validaciones. Se aÃ±adiÃ³ persistencia usando sesiones PHP.

**DÃ­a 6**
Se finalizÃ³ la documentaciÃ³n del sprint, se revisÃ³ el cÃ³digo, se ajustÃ³ la presentaciÃ³n del sistema y se completÃ³ la entrega. El sistema simula correctamente todas las funcionalidades requeridas, con una interfaz clara y lÃ³gica consistente. Todos los integrantes participaron activamente.


Â·Â·Â·Â·ExplicaciÃ³n de conexiones entre archivosÂ·Â·Â·Â·

-*frontend/index.html**

    Es la interfaz visual.

    Tiene un formulario para solicitar turnos y un botÃ³n para llamar al siguiente paciente.

    Usa fetch() para enviar datos en formato JSON al backend (sistema_turnos.php).

-*backend/sistema_turnos.php**

    Recibe las solicitudes del frontend mediante POST.

    Usa $_SESSION para mantener persistente la instancia del Turnero.

    Dependencias:

        Turnero.php â†’ contiene la lÃ³gica de turnos.

        Paciente.php â†’ define la clase del paciente.

    Funciones:

        accion = solicitar â†’ agrega el paciente a la cola priorizada.

        accion = llamar â†’ extrae al siguiente paciente segÃºn urgencia.

-*backend/classes/Paciente.php**

    Define la clase Paciente con nombre, DNI y nivel de urgencia.

-*backend/classes/Turnero.php**

    Administra la cola de turnos con prioridades (urgencia mÃ¡s alta tiene mayor prioridad).

    Usa SplPriorityQueue de PHP.

    Funciones:

        solicitarTurno(Paciente) â†’ lo encola.

        llamarSiguiente() â†’ retorna el paciente mÃ¡s urgente.

        hayTurnos() â†’ indica si hay pacientes esperando.

-*backend/classes/AVLTree.php + Medicamento.php**

    Permiten insertar y buscar medicamentos en un Ã¡rbol AVL.

    La bÃºsqueda es rÃ¡pida y balanceada.

    Se simula el endpoint /api/medicamento.

-*backend/classes/Grafo.php**

    Permite agregar relaciones entre mÃ©dicos y pacientes.

    Se utiliza en /api/relaciones.

### ---------------------------------Sprint 3---------------------------------
## âœ… Ideas para funcionalidades Sprint 3

1. âœ… **Historial de pacientes atendidos** (guardarlos en archivo o base de datos).
2. âœ… **Login mÃ©dico / administrativo** para ver panel distinto.
3. âœ… **Filtro de turnos por urgencia en pantalla**.
4. âœ… **Formulario para registrar medicamentos** (cargar mÃ¡s en el AVL).
5. âœ… **Interfaz visual del grafo** (mostrar relaciones con JavaScript tipo Graphviz).
6. âœ… **Contador de turnos atendidos por dÃ­a**.
7. âœ… **SimulaciÃ³n multiconsultorio**: atender pacientes por mÃ©dico.


ğŸ“… **DÃ­a 1**
RevisiÃ³n y reorganizaciÃ³n del sistema tras entrevista tÃ©cnica
Durante la primera jornada del Sprint 3, se llevÃ³ a cabo una entrevista con el profesor (simulando el rol de inversor), en la cual se identificÃ³ un aspecto clave que no habÃ­a sido contemplado correctamente en etapas anteriores: la definiciÃ³n previa de la base de datos.

Hasta este punto, el equipo habÃ­a avanzado principalmente en el desarrollo de la interfaz visual (HTML y CSS), sin contar con una estructura clara ni implementada de la base de datos que sirviera como respaldo para las funcionalidades del sistema. Esta situaciÃ³n generÃ³ un inconveniente en la integraciÃ³n entre frontend y backend, dado que no se disponÃ­a aÃºn de una lÃ³gica persistente para el almacenamiento de informaciÃ³n.

ğŸ›  Acciones tomadas:
Se reordenÃ³ la planificaciÃ³n del Sprint 3, priorizando la creaciÃ³n del esquema de la base de datos como punto de partida estructural del sistema.
-Se decidiÃ³ diseÃ±ar las tablas necesarias para:
-Pacientes atendidos (historial)
-Usuarios (mÃ©dicos y personal administrativo)
-Turnos registrados
-Medicamentos (stock y propiedades)

â€¢ Se optÃ³ por implementar una base de datos en MySQL y vincularla al backend en PHP mediante conexiones PDO.

â€¢ AdemÃ¡s, se incorporÃ³ el uso de control de versiones con Git, creando un repositorio local y remoto para asegurar trazabilidad de cambios y trabajo colaborativo mÃ¡s ordenado.

ğŸ§© ConclusiÃ³n del dÃ­a:
Este dÃ­a marcÃ³ un punto de inflexiÃ³n en la organizaciÃ³n tÃ©cnica del proyecto. El equipo comprendiÃ³ la importancia de contar con una base sÃ³lida a nivel de datos antes de avanzar en el diseÃ±o visual o en la lÃ³gica de negocio avanzada. Como resultado, se redefinieron las prioridades del Sprint para asegurar la coherencia del sistema completo.

ğŸ“… **DÃ­a 2 y 3**



CreaciÃ³n de la Base de Datos con todas sus tablas correspondientes tablas y adaptaciÃ³n del cÃ³digo para poder conectar con las BD
